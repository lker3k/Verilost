`timescale 1ps/1ps
module mic_load #(parameter N=16) (
    input bclk,      // Assume a 18.432 MHz clock
    input adclrc,
    input adcdat,
    output logic valid,
    output logic [N-1:0] sample_data
);

    
    logic redge_adclrc, adclrc_q;
    logic [N-1:0] temp_rx_data;
    logic [4:0] bit_index;  
    logic valid_pulse;      

    always_ff @(posedge bclk) begin : adclrc_rising_edge_ff
        adclrc_q <= adclrc;
    end
    assign redge_adclrc = ~adclrc_q & adclrc; // rising edge detected!

    // Main logic to store ADCDAT and update bit_index
    always_ff @(posedge bclk) begin
        if (bit_index < N) begin
            temp_rx_data[(N-1)-bit_index] <= adcdat;  
            bit_index <= bit_index + 1;
        end
    end

    always_ff @(posedge bclk) begin
        if (bit_index==N) begin
            valid <= 1;   // Set valid high for 1 clock cycle
            sample_data <= temp_rx_data;
        end 
        
        else begin
            valid <= 0;   // Then set valid low
        end
    end

    always_ff @(posedge redge_adclrc) begin
        if (redge_adclrc) begin
            bit_index <= 0;
        end
    end

    
    always_ff @(posedge bclk) begin
        if (bit_index <= N) begin
            temp_rx_data[(N-1)-bit_index] <= adcdat; // Load the sample data
            bit_index <= bit_index+1;
        end
    end


    

endmodule
